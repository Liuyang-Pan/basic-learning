package org.example.collection.datastructure;

/**
 * 数据结构-树状结构
 */
public class Tree {
}

/**
 * 数据结构-树状结构之二叉树
 * 只能有一个根节点，每个节点最多支持2个直接子节点。
 * 节点的度:节点拥有的子树的个数。二叉树的度不大于2；叶子节点度为0的节点，也称之为终端结点。
 * 高度:从下往上数的高度。叶子结点的高度为1，叶子结点的父节点高度为2，以此类推，根节点的高度最高。
 * 层:根节点在第一层，以此类推
 * 兄弟节点:拥有共同父节点的节点互称为兄弟节点。
 * 应用:
 * 一般用于二分查找，大的数据放在右节点，小的数据放在左边节点
 * 特点:增删改查相对较快
 * 优化:
 * 平衡二叉树:任意节点的左右两个子树的高度差不超过1，任意节点的左右两个子树都是一颗平衡二叉树
 * 添加元素时可能存在二叉树不平衡的情况基本策略采用左旋或者右旋保证平衡
 */
class BinaryTree {
}

/**
 * 数据结构-树状结构之红黑树
 * 概述:
 * 红黑树是一种自平衡的二叉查找树，是计算机科学中用到的一种数据结构。
 * 1972年出现，当时被称之为平衡二叉B树。1978年被修改为如今的"红黑树"。
 * 每一个节点可以是红或者黑;红黑树不是通过高度平衡的，它的平衡是通过“红黑规则”进行实现的。
 * 规则特点:
 * 每一个节点或是红色的，或者是黑色的，根节点必须是黑色。
 * 如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为Nil，这些Nil视为叶节点，叶节点是黑色的。
 * 如果某一个节点是红色，那么它的子节点必须是黑色(不能出现两个红色节点相连的情况)。
 * 对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点。
 * 特点:增删改查性能都很好
 */
class RedBlackTree {
}
